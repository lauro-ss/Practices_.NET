@page "/produtos"
@inject IProdutoService _produtoService
@inject NavigationManager NavManager

<PageTitle>Produtos</PageTitle>

<h3>Produtos</h3>
@if (data == null)
{
    <h4>Carregando...</h4>
}
else
{
    @if (data.Any())
    {
        <table>
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Nome</th>
                    <th>Valor</th>
                    <th>Status</th>
                    <th>Quantidade</th>
                    <th>Categoria</th>
                    <th>Subcategoria</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in data)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Nome</td>
                        <td>@item.Valor</td>
                        <td>@item.Status</td>
                        <td>@item.Quantidade</td>
                        <td>@item.IdCategoria</td>
                        <td>@item.Subcategoria</td>
                        <td><button @onclick="() => EditarProduto(item.Id)">Editar</button></td>
                        <td><button @onclick="() => RemoverProduto(item.Id)">Remover</button></td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private IEnumerable<Produto>? data = null;

    private async Task EditarProduto(int id)
    {
        NavManager.NavigateTo($"/EditarProduto/{id}");
    }

    private async Task RemoverProduto(int id)
    {
        await _produtoService.Delete(id);
        data = await _produtoService.GetAll();
        await InvokeAsync(() =>
        {
          StateHasChanged();
        });
    }

    protected override async Task OnInitializedAsync()
    {
        data = await _produtoService.GetAll();
    }
}
